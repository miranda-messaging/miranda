/*
 * Copyright 2017 Long Term Software LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ltsllc.miranda;

import com.ltsllc.clcl.EncryptedMessage;
import com.ltsllc.clcl.PrivateKey;
import com.ltsllc.clcl.PublicKey;
import com.ltsllc.commons.util.HexConverter;
import com.ltsllc.commons.util.Utils;
import com.ltsllc.miranda.clientinterface.MirandaException;
import com.ltsllc.miranda.test.TestCase;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;

/**
 * Created by Clark on 4/3/2017.
 */
public class TestPublicKey extends TestCase {
    private PublicKey publicKey;

    public PublicKey getPublicKey() {
        return publicKey;
    }

    public void reset() throws Exception {
        super.reset();

        publicKey = null;
    }

    public static final String
    public static final String SERIALIZED_PRIVATE_KEY = "ACED0005737200146A6176612E73656375726974792E4B6579526570BDF94FB3889AA5430200044C0009616C676F726974686D7400124C6A6176612F6C616E672F537472696E673B5B0007656E636F6465647400025B424C0006666F726D617471007E00014C00047479706574001B4C6A6176612F73656375726974792F4B657952657024547970653B7870740003525341757200025B42ACF317F8060854E00200007870000004C1308204BD020100300D06092A864886F70D0101010500048204A7308204A30201000282010100AAC60BD916BCE303B7A36E3D050CAF8BF5BFD1695CA2EDBABD2E27A1CD2BAE8E6AA8F51D56A6DFE7321299DEA071040E81C4C6F960601562BFC79891985FC24C4B498CB38A37D316EF6572F7B5C3ABB627E227DC616105BC4718ABF3E9ABFF6D4691AF23FD0562357DD93395BBF6C194DFDC00ABB913A90FC09A5D9A791DEBE616DB47A3A093A8977D0D0D7B59C2D93C1E6CE7FD18C2FCF5FDE395BDC825A60718E3E9B363FB782FE0998301E34AE098E264AFC81A2CD63CEECF1F3CE39B673A5BC3A6177D2B0F2C7A3D5A83E681AB52FF2DE539CA8B3379AFAF6BAB8A338E9173B9352FC6D90A72A1F49C8F43949840D67E2B938A12088102458F5B04E9526D020301000102820100515F652DE043C8F8707C937EC7F52F80C56CCD6023200F9F379DD28CAAB2F1CE32CCA75F7F76ACA2019E136B9D8FBC9B1D02A2BD194B2F658A7495226B34D5E47CCB631BF9F477C529F5713ECF81994486E4A091C664F0D2B21DF3719A1AB6EF5EFCF43375D126E6CE3CBCF3D048D81D143E44A38EE0EB61F2289C098B44D2AE5D47338700FDB585C966C984FBEE9983EEB8628F0751B341986CC4514F4F7A2045676D2CD8E6C2F75120C4A3EE39D8DBC73A70FFB49AFD15FF9253246339DA0176AAA5ADFF425F5CC122C5710359B39AAAD66A165B05621EA6925E5EE7CAE181C1256DFFDA7042CB3A21D133875BC81BBC10F596EE9087DDFCB7EFB3D7DEDC9102818100D6F2F9C7E1167E16683419AA5F6EE6C69E53E1EDC4228B649483C9B8EB0E99844D0285A6C1D848E468EAF3EDF17B53E2C069D4E323A7AEE9EF8609C4D93C7F86D60673898C79F662E96AF979FA023A9BC6528CBB205668E68C7CA7C28D791D7840469E49F8E6C216470B901B2D58291A23A8D2425722398027946B01BF96AB7F02818100CB634C0106F7B7EFB1D04DED97B21C79F541F820E425B7E0BC61C221C170D1AF8F6223E861D65B37C2611784110BCB5CA528A98F1A4E502419BEC817AE4ECB687DABE9EABB34DCDA3830FE354CC8711B2E9DFC693E429645CF796C1E307DA2EF88D7A03327B1D68C0EFD8C6D10A26B385F1CB05015331BD851D6C85F1C71681302818100B55D24567B5C601D05E557F682396FED0C70588426E6C2D8A5DB20DCAF308D65AD18C0AE7886C6D23A986C234B8AB4B7F1841A8560733EC9D239358AEB84F9514ACAFCB78558EF047C50AF9934D2A6A3034E69C206420296ECD8CD3001F0BC65D74DFE8709C5A2E3EB241D7E60DF2F2708098D073EBFF8E661FEFFDEE4C9FB7F0281806FF3C660425F94A5A1B0D15458CDB79302073FF78ADDA02B5A464D3F9B64E866C47BF6DBF10EB6C328819D1A1AEFED0E9FF293F2AB3E342ACAE912E6C611A5316D0B7604B8EB4E2DE8043FC942EC8A25B6314C40F9FE590D3038DBE47A388DB9600FA0A4C7D2C20FF2286A65966470B464D63BCEB8FC9AF525871E600C1DF8750281803F8428D188114FA8A549AC8C60D6C1BCD508158594AE26D850287568F5B1E1C0068BA4F1FCD3AABB184820FAB3F170EC17F62EA7F836CC08DFABC9D77F88B7EB6361F75834FAE671441D3184A1D3DF35C54F5C2846F22914BDF09C8219B636CDBC80DD4F149B434AC8631BCBAFCB8F5F19D770597F4D59D193AF935BD1049965740006504B435323387E7200196A6176612E73656375726974792E4B6579526570245479706500000000000000001200007872000E6A6176612E6C616E672E456E756D0000000000000000120000787074000750524956415445";


    public PublicKey getPublicKey(String hexString) {
        ByteArrayInputStream byteArrayInputStream = null;
        java.security.PublicKey securityPublicKey = null;

        try {
            byte[] data = HexConverter.toByteArray(hexString);
            byteArrayInputStream = new ByteArrayInputStream(data);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            securityPublicKey = (java.security.PublicKey) objectInputStream.readObject();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            Utils.closeIgnoreExceptions(byteArrayInputStream);
        }

        return new PublicKey(securityPublicKey);
    }

    public PrivateKey getPrivateKey(String hexstring) {
        ByteArrayInputStream byteArrayInputStream = null;
        java.security.PrivateKey securityPrivateKey = null;

        try {
            byte[] data = HexConverter.toByteArray(hexstring);
            byteArrayInputStream = new ByteArrayInputStream(data);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            securityPrivateKey = (java.security.PrivateKey) objectInputStream.readObject();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return new PrivateKey(securityPrivateKey);
    }


    @Before
    public void setup() throws Exception {
        reset();

        super.setup();

        publicKey = getPublicKey(SERIALIZED_PUBLIC_KEY);
    }

    public boolean equivalent(byte[] a1, byte[] a2) {
        if (a1.length != a2.length)
            return false;

        for (int i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        }

        return true;
    }

    @Test
    public void testEncrypt() throws Exception {
        byte[] plainText = {1, 2, 3};
        EncryptedMessage encryptedMessage = getPublicKey().encryptToMessage(plainText);
        byte[] result = getPrivateKey(SERIALIZED_PRIVATE_KEY).decrypt(encryptedMessage);

        assert (equivalent(result, plainText));
    }
}
