/*
 * Copyright 2017 Long Term Software LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ltsllc.miranda.util;

import com.ltsllc.commons.util.HexConverter;
import com.ltsllc.commons.util.Utils;
import com.ltsllc.miranda.clientinterface.MirandaException;
import com.ltsllc.miranda.test.TestCase;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Matchers;

import javax.net.ssl.TrustManagerFactory;
import java.io.*;
import java.security.*;
import java.security.cert.X509Certificate;

import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.verify;

/**
 * Created by Clark on 3/25/2017.
 */
public class TestUtils extends TestCase {
    public static class TestInputStream extends InputStream {
        public int read () {
            throw new IllegalStateException("Not implemented");
        }

        public void close () throws IOException {
            throw new IOException("test");
        }
    }

    public static class TestOutputStream extends OutputStream {
        public void write (int value) {
            throw new IllegalStateException("not implemented");
        }

        public void close () throws IOException {
            throw new IOException("test");
        }
    }

    private Utils utils;

    public Utils getUtils() {
        return utils;
    }

    public void reset () throws MirandaException {
        super.reset();

        utils = null;
    }

    @Before
    public void setup () throws MirandaException {
        reset();

        super.setup();

        setuplog4j();
        utils = new Utils();
    }

    @After
    public void cleanup () {
        deleteFile(TEST_FILE_NAME);
        deleteFile(TEST_TRUSTSTORE);
    }

    public String load (String filename) {
        byte[] data = null;
        FileInputStream fileInputStream = null;

        try {
            File file = new File(filename);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            fileInputStream = new FileInputStream(filename);
            int space = (int) file.length();
            data = new byte[space];
            fileInputStream.read(data);
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        } finally {
            Utils.closeIgnoreExceptions(fileInputStream);
        }

        return HexConverter.toHexString(data);
    }

    public static final String FILE_NAME = "serverkeystore";


    public void setupKeyStore (String filename) {
        String s = load(FILE_NAME);

    }

    public static final String TEST_FILE_NAME = "testfile";
    public static final String
    public static final String TEST_ALIAS = "server";
    public static final String TEST_PASSWORD = "whatever";

    public static final String TEST_TRUSTSTORE = "truststore";
    public static final String TEST_TRUSTSTORE_PASSWORD = "whatever";
    public static final String TEST_TRUSTSTORE_ALIAS = "ca";
    public static final String

    @Test
    public void testLoadKeyStoreSuccess () {
        createFile(TEST_FILE_NAME, TEST_FILE_CONTENTS);

        KeyStore keyStore = null;

        try {
            keyStore = Utils.loadKeyStore(TEST_FILE_NAME, TEST_PASSWORD);
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert (keyStore != null);
    }

    @Test
    public void testLoadKeyStoreWrongPassword () {
        createFile(TEST_FILE_NAME, TEST_FILE_CONTENTS);

        KeyStore keyStore = null;

        try {
            keyStore = Utils.loadKeyStore(TEST_FILE_NAME, "wrong");
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert (keyStore == null);
    }

    @Test
    public void testKeyStoreNoFile () {
        KeyStore keyStore = null;

        try {
            keyStore = Utils.loadKeyStore(TEST_FILE_NAME, TEST_PASSWORD);
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert (keyStore == null);
    }

    @Test
    public void testCloseIgnoreExceptionsInputStream () {
        createFile(TEST_FILE_NAME, TEST_FILE_CONTENTS);
        FileInputStream fileInputStream = null;

        try {
            fileInputStream = new FileInputStream(TEST_FILE_NAME);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            Utils.closeIgnoreExceptions(fileInputStream);
        }

        try {
            assert (!fileInputStream.getFD().valid());
        } catch (IOException e) {
        }
    }

    @Test
    public void testCloseIgnoreExceptionsInputStreamException () {
        TestInputStream testInputStream = new TestInputStream();

        Utils.closeIgnoreExceptions(testInputStream);
    }

    @Test
    public void testCloseIgnoreExceptionsWriter () {
        FileWriter fileWriter = null;

        try {
            fileWriter = new FileWriter(TEST_FILE_NAME);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            Utils.closeIgnoreExceptions(fileWriter);
        }
    }

    @Test
    public void testCloseIgnoreExceptionsOutputStream () {
        FileOutputStream fileOutputStream = null;

        try {
            fileOutputStream = new FileOutputStream(TEST_FILE_NAME);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            Utils.closeIgnoreExceptions(fileOutputStream);
        }
    }

    @Test
    public void testCloseIgnoreExceptionsReader () {
        createFile(TEST_FILE_NAME, TEST_FILE_CONTENTS);

        FileReader fileReader = null;

        try {
            fileReader = new FileReader(TEST_FILE_NAME);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            Utils.closeIgnoreExceptions(fileReader);
        }
    }


    public static final byte[] TEST_DATA = { 1, 2, 3, 4};
    public static final String TEST_HEX_STRING = "01020304";

    public static boolean equivalent (byte[] b1, byte[] b2)
    {
        if (b1.length != b2.length)
            return false;

        for (int i = 0; i < b1.length; i++)
        {
            if (b1[i] != b2[i])
                return false;
        }

        return true;
    }

}
